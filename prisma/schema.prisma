generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
  HOTEL_OWNER
}

enum UserGender {
  MALE
  FEMALE
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELED
  REFUNDED
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  fullName          String?
  email             String    @unique
  password          String
  isVerified        Boolean   @default(false)
  profilePic        String?   @default("")
  gender            String?   @default("OTHER")
  age               Float?    @default(0)
  height            Float?    @default(0)
  weight            Float?    @default(0)
  level             String?   @default("BEGINNER")
  passwordChangedAt DateTime?
  isResetPassword   Boolean   @default(false)
  canResetPassword  Boolean   @default(false)
  isResentOtp       Boolean   @default(false)
  role              UserRole  @default(USER)
  planExpiration    DateTime?
  isSubscribed      Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  workoutPlanDays WorkoutPlanDay[]
  missions        Mission[]
  subscriptions   Subscription[]

  @@map("users")
}

model WorkoutPlanDay {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  day               Int
  name              String?
  sets              Int?
  reps              String?
  description       String?
  rest              String?
  motivationalQuote String
  isWorkoutDay      Boolean
  videoUrl          String?
  phase             Int
  completed         Boolean  @default(false)
  scheduledDate     DateTime // <-- new field: the date this workout is assigned
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("workout_plan_days")
}

model Mission {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  mission        String
  timeCommitment String
  gearCheck      String
  squad          String
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("missions")
}

model Plan {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  planName         String
  amount           Float
  currency         String?        @default("eur")
  productId        String
  priceId          String?
  active           Boolean?       @default(true)
  allowedPhases    Int?           @default(0)
  description      String?
  features         Json?
  totalSubscribers Int?           @default(0)
  Subscription     Subscription[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@map("plans")
}

model Subscription {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @unique @db.ObjectId
  planId          String    @db.ObjectId
  paymentStatus   String
  amount          Float
  stripePaymentId String    @unique
  startDate       DateTime
  endDate         DateTime?
  endsAt          DateTime?
  user            User      @relation(fields: [userId], references: [id])
  plan            Plan      @relation(fields: [planId], references: [id])

  @@map("subscriptions")
}
